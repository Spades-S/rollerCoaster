{"version":3,"sources":["../../../../src/home/logic/user.js.bak"],"names":["userModel","model","account","post","test","header","isPhoneNumExist","think","isEmpty","fail","session","allowMethods","sessionCode","Number","get","errors","code","console","log","redirect","cookie","reset","logic","base"],"mappings":"AAAA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sCAKiB,CAEZ;;;;;;;;;;;AAGOA,yC,GAAY,KAAKC,KAAL,CAAW,MAAX,C;AACZC,uC,GAAU,KAAKC,IAAL,CAAU,SAAV,C;;qCAEV,QAAD,CAAWC,IAAX,CAAgB,KAAKC,MAAL,CAAY,SAAZ,CAAhB,C;;;;;;uCAC6BL,UAAUM,eAAV,CAA0BJ,OAA1B,C;;;AAAxBI,+C;;qCACDC,MAAMC,OAAN,CAAcF,eAAd,C;;;;;iEACQ,KAAKG,IAAL,CAAU,iBAAV,C;;;;uCAED,KAAKC,OAAL,CAAa,OAAb,EAAsB,IAAtB,C;;;;;;;;uCAGkBV,UAAUM,eAAV,CAA0BJ,OAA1B,C;;;AAAxBI,gD;;oCACCC,MAAMC,OAAN,CAAcF,gBAAd,C;;;;;iEACM,KAAKG,IAAL,CAAU,sBAAV,C;;;;;;;;;;;;;;;;;;;;;;;;;AAMf,qCAAKE,YAAL,GAAoB,KAApB;;uCACwB,KAAKD,OAAL,CAAa,MAAb,C;;;AAApBE,2C;;sCACAC,OAAO,KAAKC,GAAL,CAAS,MAAT,CAAP,MAA6BD,OAAOD,WAAP,C;;;;;kEACtB,KAAKH,IAAL,CAAU,gBAAV,EAA4B,KAAKM,MAAL,EAA5B,C;;;;;;;;;;;;;;;;;;;;;;;;;;uCAKM,KAAKL,OAAL,CAAa,MAAb,C;;;AAAbM,oC;;AACJC,wCAAQC,GAAR,CAAYF,IAAZ;;oCACIA,I;;;;;kEACO,KAAKG,QAAL,CAAc,aAAd,C;;;;;;;;;;;;;;;;;;;;;;;;qCAKR,KAAKC,MAAL,CAAY,KAAZ,C;;;;;kEACQ,KAAKD,QAAL,CAAc,aAAd,C;;;AAEX,qCAAKR,YAAL,GAAoB,UAApB;;;;;;;;;;;;;;;;;;;;;;;;AAIA,qCAAKA,YAAL,GAAoB,KAApB;;;;;;;;;;;;;;;;;;;;;;;;AAIA,qCAAKA,YAAL,GAAoB,MAApB;;;;;;;;;;;;;;;;;;;;;;;;qCAIG,KAAKS,MAAL,CAAY,KAAZ,C;;;;;kEACQ,KAAKD,QAAL,CAAc,aAAd,C;;;;;;;;;;;;;;;;;;;;;;;;;;uCAKO,KAAKT,OAAL,CAAa,OAAb,C;;;AAAdW,qC;;oCACAA,K;;;;;kEACO,KAAKF,QAAL,CAAc,aAAd,C;;;;;;;;;;;;;;;;;;;;;;;;AAKX,qCAAKR,YAAL,GAAoB,MAApB;;;;;;;;;;;;;;;;;;EAvEqBJ,MAAMe,KAAN,CAAYC,I","file":"user.js.js","sourcesContent":["/**\n * Created by fuyazhou on 17/7/11.\n */\n'use strict';\n\nexport default class extends think.logic.base {\n\n\n    indexAction(){\n\n    }\n\n    async getvfcodeAction() {\n        let userModel = this.model('user')\n        let account = this.post('account')\n\n        if((/verify/).test(this.header('Referer'))){\n            let isPhoneNumExist = await userModel.isPhoneNumExist(account)\n            if(think.isEmpty(isPhoneNumExist)){\n                return this.fail('invalid account')\n            } else {\n                await this.session('reset', true)\n            }\n        } else {\n            let isPhoneNumExist = await userModel.isPhoneNumExist(account);\n            if (!think.isEmpty(isPhoneNumExist)) {\n                return this.fail('phone number exists!')\n            }\n        }\n    }\n\n    async verifycodeAction() {\n        this.allowMethods = 'get'\n        let sessionCode = await this.session('code')\n        if (Number(this.get('code')) !== Number(sessionCode)) {\n            return this.fail('validate error', this.errors())\n        }\n    }\n\n    async passwordAction() {\n        let code = await this.session('code')\n        console.log(code)\n        if(!code){\n            return this.redirect('/user/index')\n        }\n    }\n\n    async registerAction() {\n        if(this.cookie('uid')){\n            return this.redirect('/user/index')\n        }\n        this.allowMethods = 'get,post'\n    }\n\n    async loginAction() {\n        this.allowMethods = 'get'\n    }\n\n    async loginintosystemAction() {\n        this.allowMethods = 'post'\n    }\n\n    async verifyAction() {\n        if(this.cookie('uid')) {\n            return this.redirect('/user/index')\n        }\n    }\n\n    async resetAction() {\n        let reset = await this.session('reset')\n        if(!reset){\n            return this.redirect('/user/index')\n        }\n    }\n\n    async resetpasswordAction() {\n        this.allowMethods = 'post'\n    }\n\n}"]}