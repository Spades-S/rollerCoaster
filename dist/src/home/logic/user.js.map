{"version":3,"sources":["../../../../src/home/logic/user.js"],"names":["userModel","model","account","post","isPhoneNumExist","isExist","test","header","fail","session","allowMethods","sessionCode","Number","get","errors","code","console","log","redirect","cookie","reset","think","logic","base"],"mappings":"AAAA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sCAGkB,CAEb;;;;;;;;;;AAGOA,yC,GAAY,KAAKC,KAAL,CAAW,MAAX,C;AACZC,uC,GAAU,KAAKC,IAAL,CAAU,SAAV,C;;uCACMH,UAAUI,eAAV,CAA0BF,OAA1B,C;;;AAAhBG,uC;;qCACC,QAAD,CAAWC,IAAX,CAAgB,KAAKC,MAAL,CAAY,SAAZ,CAAhB,C;;;;;oCACKF,O;;;;;iEACM,KAAKG,IAAL,CAAU,iBAAV,C;;;;uCAED,KAAKC,OAAL,CAAa,OAAb,EAAsB,IAAtB,C;;;;;;;qCAEH,UAAD,CAAaH,IAAb,CAAkB,KAAKC,MAAL,CAAY,SAAZ,CAAlB,C;;;;;qCACHF,O;;;;;iEACQ,KAAKG,IAAL,CAAU,IAAV,EAAgB,sBAAhB,C;;;;;;;;;;;;;;;;;;;;;;;;;AAOf,qCAAKE,YAAL,GAAoB,KAApB;;uCACwB,KAAKD,OAAL,CAAa,MAAb,C;;;AAApBE,2C;;sCACAC,OAAO,KAAKC,GAAL,CAAS,MAAT,CAAP,MAA6BD,OAAOD,WAAP,C;;;;;kEACtB,KAAKH,IAAL,CAAU,gBAAV,EAA4B,KAAKM,MAAL,EAA5B,C;;;;;;;;;;;;;;;;;;;;;;;;;;uCAKM,KAAKL,OAAL,CAAa,MAAb,C;;;AAAbM,oC;;AACJC,wCAAQC,GAAR,CAAYF,IAAZ;;oCACKA,I;;;;;kEACM,KAAKG,QAAL,CAAc,aAAd,C;;;;;;;;;;;;;;;;;;;;;;;;qCAKP,KAAKC,MAAL,CAAY,KAAZ,C;;;;;kEACO,KAAKD,QAAL,CAAc,aAAd,C;;;AAEX,qCAAKR,YAAL,GAAoB,UAApB;;;;;;;;;;;;;;;;;;;;;;;;AAIA,qCAAKA,YAAL,GAAoB,KAApB;;;;;;;;;;;;;;;;;;;;;;;;AAIA,qCAAKA,YAAL,GAAoB,MAApB;;;;;;;;;;;;;;;;;;;;;;;;qCAII,KAAKS,MAAL,CAAY,KAAZ,C;;;;;kEACO,KAAKD,QAAL,CAAc,aAAd,C;;;;;;;;;;;;;;;;;;;;;;;;;;uCAKO,KAAKT,OAAL,CAAa,OAAb,C;;;AAAdW,qC;;oCACCA,K;;;;;kEACM,KAAKF,QAAL,CAAc,aAAd,C;;;;;;;;;;;;;;;;;;;;;;;;AAKX,qCAAKR,YAAL,GAAoB,MAApB;;;;;;;;;;;;;;;;;;EApEqBW,MAAMC,KAAN,CAAYC,I","file":"user.js","sourcesContent":["/**\n * Created by fuyazhou on 17/7/11.\n */\n'use strict';\n\nexport default class extends think.logic.base {\n    indexAction() {\n\n    }\n\n    async getvfcodeAction() {\n        let userModel = this.model('user');\n        let account = this.post('account');\n        let isExist = await userModel.isPhoneNumExist(account);\n        if ((/verify/).test(this.header('Referer'))) {\n            if (!isExist) {\n                return this.fail('invalid account')\n            } else {\n                await this.session('reset', true)\n            }\n        } else if((/register/).test(this.header('Referer'))){\n            if(isExist){\n                return this.fail(1000, 'phone number exists!');\n            }\n\n        }\n    }\n\n    async verifycodeAction() {\n        this.allowMethods = 'get'\n        let sessionCode = await this.session('code')\n        if (Number(this.get('code')) !== Number(sessionCode)) {\n            return this.fail('validate error', this.errors())\n        }\n    }\n\n    async passwordAction() {\n        let code = await this.session('code')\n        console.log(code)\n        if (!code) {\n            return this.redirect('/user/index')\n        }\n    }\n\n    async registerAction() {\n        if (this.cookie('uid')) {\n            return this.redirect('/user/index')\n        }\n        this.allowMethods = 'get,post'\n    }\n\n    async loginAction() {\n        this.allowMethods = 'get'\n    }\n\n    async loginintosystemAction() {\n        this.allowMethods = 'post'\n    }\n\n    async verifyAction() {\n        if (this.cookie('uid')) {\n            return this.redirect('/user/index')\n        }\n    }\n\n    async resetAction() {\n        let reset = await this.session('reset')\n        if (!reset) {\n            return this.redirect('/user/index')\n        }\n    }\n\n    async resetpasswordAction() {\n        this.allowMethods = 'post'\n    }\n}"]}