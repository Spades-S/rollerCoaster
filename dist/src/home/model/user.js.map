{"version":3,"sources":["../../../../src/home/model/user.js"],"names":["args","tableName","articleid","field","where","id","select","data","newLikes","likes","likedata","Array","push","oldLikes","JSON","parse","index","indexOf","splice","update","lines","phone","code","url","method","form","apikey","mobile","text","send_res","nickname","psd","uid","sha1","createHash","newPsd","digest","add","password","phoneNumber","account","ck","psdencrypted","res","test","find","userInfo","userDetail","detail","avatar","gender","birth","mail","city","introduction","updateRes","think","isEmpty","model","base"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;AACA;;;;;;;;;;;;;;;;+BAGkB;AAAA;;AAAA,8CAANA,IAAM;AAANA,oBAAM;AAAA;;AACV,sKAAcA,IAAd;AACA,iBAAKC,SAAL,GAAiB,MAAjB;AACH;;;;mGAEiBC,S;;;;;;;uCACG,KAAKC,KAAL,CAAW,OAAX,EAAoBC,KAApB,CAA0B,EAACC,IAAI,CAAL,EAA1B,EAAmCC,MAAnC,E;;;AAAbC,oC;AACAC,wC;;AACJ,oCAAID,KAAK,CAAL,EAAQE,KAAR,IAAiB,EAArB,EAAyB;AACjBC,4CADiB,GACN,IAAIC,KAAJ,EADM;;AAErBD,6CAASE,IAAT,CAAcV,SAAd;AACAM,+CAAW,yBAAeE,QAAf,CAAX;AACH,iCAJD,MAIO;AACCG,4CADD,GACYC,KAAKC,KAAL,CAAWR,KAAK,CAAL,EAAQE,KAAnB,CADZ;AAECO,yCAFD,GAESH,SAASI,OAAT,CAAiBf,SAAjB,CAFT;;AAGH,wCAAIc,SAAS,CAAb,EAAgB;AACZH,iDAASK,MAAT,CAAgBF,KAAhB,EAAuB,CAAvB;AACH,qCAFD,MAEO;AACHH,iDAASD,IAAT,CAAcV,SAAd;AACH;AACDM,+CAAW,yBAAeK,QAAf,CAAX;AACH;;uCACiB,KAAKT,KAAL,CAAW,EAACC,IAAI,CAAL,EAAX,EAAoBc,MAApB,CAA2B,EAACV,OAAOD,QAAR,EAA3B,C;;;AAAdY,qC;iEACGA,K;;;;;;;;;;;;;;;;;;;;;;;;;;uCAIU,KAAKjB,KAAL,CAAW,OAAX,EAAoBC,KAApB,CAA0B,EAACC,IAAI,CAAL,EAA1B,EAAmCC,MAAnC,E;;;AAAbC,oC;kEACGA,I;;;;;;;;;;;;;;;;;;;qGAGiBF,E;;;;;;;uCACP,KAAKF,KAAL,CAAW,kBAAX,EAA+BC,KAA/B,CAAqC,EAACC,IAAIA,EAAL,EAArC,EAA+CC,MAA/C,E;;;AAAbC,oC;kEACGA,I;;;;;;;;;;;;;;;;;;;qGAGOc,K,EAAOC,I;;;;;;;;uCAEC,8BAAG;AACvBC,yCAAK,iDADkB;AAEvBC,4CAAQ,MAFe;AAGvBC,0CAAM;AACLC,gDAAQ,kCADH;AAELC,gDAAQN,KAFH;AAGLO,8CAAMN,OAAO;AAHR;AAHiB,iCAAH,C;;;AAAjBO,wC;kEASMA,Q;;;;;;;;;;;;;;;;;;;;;;;;qGAMAR,K,EAAOS,Q,EAAUC,G,EAAKC,G;;;;;;AAC7BC,oC,GAAO,iBAAOC,UAAP,CAAkB,MAAlB,C;;AACdD,qCAAKd,MAAL,CAAYY,GAAZ;AACII,sC,GAASF,KAAKG,MAAL,CAAY,KAAZ,C;;uCACE,KAAKC,GAAL,CAAS;AACvBP,8CAAUA,QADa;AAEvBQ,8CAAUH,MAFa;AAGvBI,iDAAalB,KAHU;AAIvBW,yCAAKA;AAJkB,iCAAT,C;;;AAAX3B,kC;kEAMGA,E;;;;;;;;;;;;;;;;;;;qGAGYmC,O,EAAST,G,EAAKU,E;;;;;;AAC1BR,oC,GAAO,iBAAOC,UAAP,CAAkB,MAAlB,C;;AACdD,qCAAKd,MAAL,CAAYY,GAAZ;AACIW,4C,GAAeT,KAAKG,MAAL,CAAY,KAAZ,C;AACfO,mC;;qCACA,UAAD,CAAaC,IAAb,CAAkBJ,OAAlB,C;;;;;;uCACU,KAAKpC,KAAL,CAAW,EAACmC,aAAaC,OAAd,EAAuBF,UAAUI,YAAjC,EAAX,EAA2DvB,MAA3D,CAAkE,EAACa,KAAKS,EAAN,EAAlE,C;;;AAAZE,mC;;;;;;uCAEe,KAAKvC,KAAL,CAAW,EAAC0B,UAAUU,OAAX,EAAoBF,UAAUI,YAA9B,EAAX,EAAwDvB,MAAxD,CAA+D,EAACa,KAAKS,EAAN,EAA/D,C;;;AAAZE,mC;;;kEAEGA,G;;;;;;;;;;;;;;;;;;;qGAGUX,G;;;;;;;uCACI,KAAK7B,KAAL,CAAW,kBAAX,EAA+BC,KAA/B,CAAqC,EAAC4B,KAAKA,GAAN,EAArC,EAAiDa,IAAjD,E;;;AAAjBC,wC;kEACGA,Q;;;;;;;;;;;;;;;;;;;qGAGYd,G;;;;;;;uCACI,KAAK7B,KAAL,CAAW,2DAAX,EAAwEC,KAAxE,CAA8E,EAAC4B,KAAKA,GAAN,EAA9E,EAA0Fa,IAA1F,E;;;AAAnBE,0C;kEACGA,U;;;;;;;;;;;;;;;;;;;qGAGeC,M,EAAQhB,G;;;;;;;uCACR,KAAK5B,KAAL,CAAW,EAAC4B,KAAKA,GAAN,EAAX,EAAuBb,MAAvB,CAA8B;AACnDW,8CAAUkB,OAAOlB,QADkC;AAEnDmB,4CAAQD,OAAOC,MAFoC;AAGnDC,4CAAQF,OAAOE,MAHoC;AAInDC,2CAAOH,OAAOG,KAJqC;AAKnDC,0CAAMJ,OAAOI,IALsC;AAMnDC,0CAAML,OAAOK,IANsC;AAOnDC,kDAAcN,OAAOM;AAP8B,iCAA9B,C;;;AAAlBC,yC;kEASGA,S;;;;;;;;;;;;;;;;;;;uGAGYf,O,EAAST,G;;;;;;AACxBE,oC,GAAO,iBAAOC,UAAP,CAAkB,MAAlB,C;;AACXD,qCAAKd,MAAL,CAAYY,GAAZ;AACII,sC,GAASF,KAAKG,MAAL,CAAY,KAAZ,C;;uCACS,KAAKhC,KAAL,CAAW,EAACmC,aAAaC,OAAd,EAAX,EAAmCrB,MAAnC,CAA0C,EAACmB,UAAUH,MAAX,EAA1C,C;;;AAAlBoB,yC;mEACGA,S;;;;;;;;;;;;;;;;;;;uGAGMf,O;;;;;;;uCACG,KAAKpC,KAAL,CAAW,EAACmC,aAAaC,OAAd,EAAX,EAAmCK,IAAnC,E;;;AAAZF,mC;;qCACDa,MAAMC,OAAN,CAAcd,GAAd,C;;;;;mEACK,K;;;mEAEA,I;;;;;;;;;;;;;;;;;;EApHgBa,MAAME,KAAN,CAAYC,I","file":"user.js","sourcesContent":["'use strict'\n\nimport rp from 'request-promise'\nimport crypto from 'crypto'\n\nexport default class extends think.model.base {\n    init(...args) {\n        super.init(...args);\n        this.tableName = 'user';\n    }\n\n    async updateLikes(articleid) {\n        let data = await this.field('likes').where({id: 1}).select();\n        let newLikes;\n        if (data[0].likes == \"\") {\n            let likedata = new Array();\n            likedata.push(articleid);\n            newLikes = JSON.stringify(likedata);\n        } else {\n            let oldLikes = JSON.parse(data[0].likes);\n            let index = oldLikes.indexOf(articleid);\n            if (index >= 0) {\n                oldLikes.splice(index, 1);\n            } else {\n                oldLikes.push(articleid);\n            }\n            newLikes = JSON.stringify(oldLikes);\n        }\n        let lines = await this.where({id: 1}).update({likes: newLikes});\n        return lines;\n    }\n\n    async getLikes() {\n        let data = await this.field('likes').where({id: 1}).select();\n        return data;\n    }\n\n    async getAvatarInfoByUserId(id) {\n        let data = await this.field('avatar, nickname').where({id: id}).select();\n        return data;\n    }\n    \n    async sendMessage(phone, code) {\n        try {\n\t        let send_res = await rp({\n\t\t        url: 'https://sms.yunpian.com/v2/sms/single_send.json',\n\t\t        method: 'POST',\n\t\t        form: {\n\t\t\t        apikey: 'dbbbda824548a83c9976e721ddbf4cb8',\n\t\t\t        mobile: phone,\n\t\t\t        text: code + '(欢乐冶手机验证码，请完成验证)，如非本人操作，请忽略本短信'\n\t\t        }\n\t        })\n            return send_res\n        } catch (err) {\n            return err\n        }\n    }\n    \n    async register(phone, nickname, psd, uid) {\n        let sha1 = crypto.createHash('sha1')\n\t    sha1.update(psd)\n\t    let newPsd = sha1.digest('hex')\n\t    let id = await this.add({\n\t\t    nickname: nickname,\n\t\t    password: newPsd,\n\t\t    phoneNumber: phone,\n\t\t    uid: uid\n\t    })\n\t    return id\n    }\n    \n    async logIntoSystem(account, psd, ck) {\n        let sha1 = crypto.createHash('sha1')\n\t    sha1.update(psd)\n\t    let psdencrypted = sha1.digest('hex')\n\t    let res\n\t    if((/^\\d{11}$/).test(account)){\n\t\t    res = await this.where({phoneNumber: account, password: psdencrypted}).update({uid: ck})\n\t    } else {\n        \tres = await this.where({nickname: account, password: psdencrypted}).update({uid: ck})\n\t    }\n\t    return res\n    }\n    \n    async getUserInfo(uid) {\n    \tlet userInfo = await this.field('nickname, avatar').where({uid: uid}).find()\n\t    return userInfo\n    }\n    \n    async getUserDetail(uid) {\n    \tlet userDetail = await this.field('nickname, avatar, gender, birth, mail, city, introduction').where({uid: uid}).find()\n\t    return userDetail\n    }\n    \n    async updateUserDetail(detail, uid) {\n    \tlet updateRes = await this.where({uid: uid}).update({\n\t\t    nickname: detail.nickname,\n\t\t    avatar: detail.avatar,\n\t\t    gender: detail.gender,\n\t\t    birth: detail.birth,\n\t\t    mail: detail.mail,\n\t\t    city: detail.city,\n\t\t    introduction: detail.introduction\n\t    })\n\t    return updateRes\n    }\n    \n    async resetPassword(account, psd) {\n\t    let sha1 = crypto.createHash('sha1')\n\t    sha1.update(psd)\n\t    let newPsd = sha1.digest('hex')\n    \tlet updateRes = await this.where({phoneNumber: account}).update({password: newPsd})\n\t    return updateRes\n    }\n    \n    async isExist(account) {\n    \tlet res = await this.where({phoneNumber: account}).find()\n\t    if(think.isEmpty(res)){\n    \t\treturn false\n\t    } else {\n\t    \treturn true\n\t    }\n    }\n}\n"]}