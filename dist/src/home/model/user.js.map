{"version":3,"sources":["../../../../src/home/model/user.js"],"names":["args","tableName","articleid","uid","field","where","select","data","newLikes","likes","likedata","Array","push","oldLikes","JSON","parse","index","indexOf","splice","update","lines","id","phone","code","url","method","form","apikey","mobile","text","send_res","nickname","psd","sha1","createHash","newPsd","digest","add","password","phoneNumber","account","ck","psdencrypted","res","test","find","userInfo","userDetail","detail","avatar","gender","birth","mail","city","introduction","updateRes","think","isEmpty","nickName","model","base"],"mappings":"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","file":"user.js","sourcesContent":["'use strict'\n\nimport rp from 'request-promise'\nimport crypto from 'crypto'\n\nexport default class extends think.model.base {\n    init(...args) {\n        super.init(...args);\n        this.tableName = 'user';\n    }\n\n    async updateLikes(articleid, uid) {\n        let data = await this.field('likes').where({uid: uid}).select();\n        let newLikes;\n        if (data[0].likes == null) {\n            let likedata = new Array();\n            likedata.push(articleid);\n            newLikes = JSON.stringify(likedata);\n        } else {\n            let oldLikes = JSON.parse(data[0].likes);\n            let index = oldLikes.indexOf(articleid);\n            if (index >= 0) {\n                oldLikes.splice(index, 1);\n            } else {\n                oldLikes.push(articleid);\n            }\n            newLikes = JSON.stringify(oldLikes);\n        }\n        let lines = await this.where({uid: uid}).update({likes: newLikes});\n        return lines;\n    }\n\n    async getLikes(uid) {\n        let data = await this.field('likes').where({uid: uid}).select();\n        return data;\n    }\n\n    async getAvatarInfoByUserId(id) {\n        let data = await this.field('avatar, nickname').where({id: id}).select();\n        return data;\n    }\n\n    async sendMessage(phone, code) {\n        try {\n            let send_res = await rp({\n                url: 'https://sms.yunpian.com/v2/sms/single_send.json',\n                method: 'POST',\n                form: {\n                    apikey: 'dbbbda824548a83c9976e721ddbf4cb8',\n                    mobile: phone,\n                    text: code + '(欢乐冶手机验证码，请完成验证)，如非本人操作，请忽略本短信'\n                }\n            })\n            return send_res\n        } catch (err) {\n            return err\n        }\n    }\n\n    async register(phone, nickname, psd, uid) {\n        let sha1 = crypto.createHash('sha1')\n        sha1.update(psd)\n        let newPsd = sha1.digest('hex')\n        let id = await this.add({\n            nickname: nickname,\n            password: newPsd,\n            phoneNumber: phone,\n            uid: uid\n        })\n        return id\n    }\n\n    async logIntoSystem(account, psd, ck) {\n        let sha1 = crypto.createHash('sha1')\n        sha1.update(psd)\n        let psdencrypted = sha1.digest('hex')\n        let res\n        if ((/^\\d{11}$/).test(account)) {\n            res = await this.where({phoneNumber: account, password: psdencrypted}).update({uid: ck})\n        } else {\n            res = await this.where({nickname: account, password: psdencrypted}).update({uid: ck})\n        }\n        return res\n    }\n\n    async getUserInfo(uid) {\n        let userInfo = await this.field('id,nickname, avatar').where({uid: uid}).find()\n        return userInfo\n    }\n\n    async getUserDetail(uid) {\n        let userDetail = await this.field('id, nickname, avatar, phoneNumber, gender, birth, mail, city, introduction').where({uid: uid}).find()\n        return userDetail\n    }\n\n    async updateUserDetail(detail, uid) {\n        let updateRes = await this.where({uid: uid}).update({\n            nickname: detail.nickname,\n            avatar: detail.avatar,\n            gender: detail.gender,\n            birth: detail.birth,\n            mail: detail.mail,\n            city: detail.city,\n            introduction: detail.introduction\n        })\n        return updateRes\n    }\n\n    async resetPassword(account, psd) {\n        let sha1 = crypto.createHash('sha1')\n        sha1.update(psd)\n        let newPsd = sha1.digest('hex')\n        let updateRes = await this.where({phoneNumber: account}).update({password: newPsd})\n        return updateRes\n    }\n\n    async isPhoneNumExist(account) {\n        let res = await this.where({phoneNumber: account}).find()\n\n        if (think.isEmpty(res)) {\n\n            return false\n        } else {\n\n            return true\n        }\n    }\n\n    async isNickNameExist(nickName) {\n        let res = await this.where({nickname: nickName}).find()\n        if (think.isEmpty(res)) {\n            return false\n        } else {\n            return true\n        }\n    }\n}\n"]}