{"version":3,"sources":["../../../../src/home/model/comment.js"],"names":["Comment","args","tableName","userid","articleid","authorAvatar","authorName","content","timestamp","add","insertId","think","log","postid","field","where","select","data","postId","number","currentPage","order","page","countSelect","model","base"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IACMA,O;;;;;;;;;;+BACY;AAAA;;AAAA,8CAANC,IAAM;AAANA,oBAAM;AAAA;;AACV,wKAAcA,IAAd;AACA,iBAAKC,SAAL,GAAiB,SAAjB;AACH;;;;mGAEgBC,M,EAAQC,S,EAAWC,Y,EAAcC,U,EAAYC,O,EAASC,S;;;;;;;;uCAE1C,KAAKC,GAAL,CAAS;AAC1B,gDAAYN,MADc;AAE1B,oDAAgBE,YAFU;AAG1B,kDAAcC,UAHY;AAI1B,8CAAUF,SAJgB;AAK1B,+CAAWG,OALe;AAM1B,kDAAcC;AANY,iCAAT,C;;;AAAjBE,wC;iEAQGA,Q;;;;;;AAEPC,sCAAMC,GAAN;iEACO,K;;;;;;;;;;;;;;;;;;;qGAKUC,M;;;;;;;uCACJ,KAAKC,KAAL,CAAW,+CAAX,EAA4DC,KAA5D,CAAkE,EAACF,QAAQA,MAAT,EAAlE,EAAoFG,MAApF,E;;;AAAbC,oC;kEACGA,I;;;;;;;;;;;;;;;;;;;qGAGcC,M,EAAQC,M,EAAQC,W;;;;;;;uCACnB,KAAKN,KAAL,CAAW,+CAAX,EAA4DO,KAA5D,CAAkE,SAAlE,EAA6EN,KAA7E,CAAmF,EAACG,QAAQA,MAAT,EAAnF,EAAqGI,IAArG,CAA0GF,WAA1G,EAAuHD,MAAvH,EAA+HI,WAA/H,E;;;AAAbN,oC;kEAEEA,I;;;;;;;;;;;;;;;;;;EAhCON,MAAMa,KAAN,CAAYC,I;;kBAoCnBzB,O","file":"comment.js","sourcesContent":["'use strict'\nclass Comment extends think.model.base {\n    init(...args) {\n        super.init(...args);\n        this.tableName = 'comment';\n    }\n\n    async addComment(userid, articleid, authorAvatar, authorName, content, timestamp) {\n        try {\n            let insertId = await this.add({\n                \"authorId\": userid,\n                \"authorAvatar\": authorAvatar,\n                \"authorName\": authorName,\n                \"postId\": articleid,\n                \"content\": content,\n                \"updateTime\": timestamp\n            });\n            return insertId;\n        } catch (e) {\n            think.log(`add user cause wrong ${e}`);\n            return false;\n        }\n    }\n\n\n    async getCommentByPostId(postid) {\n        let data = await this.field('authorAvatar, authorName, content, updateTime').where({postid: postid}).select();\n        return data;\n    }\n\n    async getPerPageComments(postId, number, currentPage) {\n         let data = await this.field('authorAvatar, authorName, content, updateTime').order('id DESC').where({postId: postId}).page(currentPage, number).countSelect();\n\n        return data;\n    }\n}\n\nexport default Comment;"]}