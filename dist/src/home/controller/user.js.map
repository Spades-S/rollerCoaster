{"version":3,"sources":["../../../../src/home/controller/user.js"],"names":["checkLogin","assign","cookie","display","redirect","account","post","userModel","model","isPhoneNumExist","accountExist","fail","code","generateVerificationCode","session","Number","sessionCode","console","log","success","errors","phone","nickname","psd","isNickNameExist","nicknameExist","ck","generateUid","register","data","uid","logIntoSystem","loginRes","isEmpty","think","getUserInfo","userInfo","getUserDetail","userDetail","avatar","gender","birth","mail","introduction","city","updateUserDetail","updateRes","resetPassword"],"mappings":"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","file":"user.js","sourcesContent":["import base from './base.js';\n\nexport default class extends base {\n    indexAction() {\n        if (checkLogin(this)) {\n            this.assign('uid', this.cookie('uid'))\n            return this.display('user/index.html');\n        } else {\n            return this.redirect('/user/login')\n        }\n    }\n\n    async registerAction() {\n        return this.display('user/register.html')\n    }\n\n    async getvfcodeAction() {\n        try {\n\n            let account = this.post('account')\n            let userModel = this.model('user');\n            let accountExist = await userModel.isPhoneNumExist(account);\n            if (accountExist) {\n                return this.fail(1000, 'phone number exists!')\n            }\n            let code = generateVerificationCode();\n\n            // let userModel = this.model('user')\n            // let send_res = await userModel.sendMessage(phone, code)\n\n            await this.session('account', account);\n            await this.session('code', Number(code));\n\n\n            let sessionCode = await this.session('code')\n            console.log(sessionCode)\n\n            return this.success(true)\n            // this.success(send_res)\n\n        } catch (err) {\n            return this.fail(err, this.errors())\n        }\n    }\n\n    async verifycodeAction() {\n        return this.success('successfully verified')\n    }\n\n    async passwordAction() {\n        if (checkLogin(this)) {\n            return this.redirect('index')\n        } else {\n            return this.display('user/password.html')\n        }\n    }\n\n    async registerinAction() {\n        try {\n            let phone = await this.session('account'),\n                nickname = this.post('nickname'),\n                psd = this.post('psd')\n            let userModel = this.model('user')\n            let nicknameExist = await userModel.isNickNameExist(nickname);\n            if(nicknameExist){\n                return this.fail(1000,'nickname has already existed!');\n            }\n\n            let ck = generateUid()\n            let data = await userModel.register(phone, nickname, psd, ck)\n\n            this.cookie('uid', ck)\n            console.log(data)\n\n            return this.success(data)\n        } catch (err) {\n            return this.fail(err)\n        }\n    }\n\n    async loginAction() {\n        let uid = this.cookie('uid')\n        if (uid) {\n            return this.redirect('/user/index')\n        }\n        return this.display('user/login.html')\n    }\n\n    async logintosystemAction() {\n        let account = this.post('account')\n        let psd = this.post('psd')\n        let userModel = this.model('user')\n\n        let ck = generateUid()\n        let loginRes = await userModel.logIntoSystem(account, psd, ck)\n\n        let isEmpty = think.isEmpty(loginRes)\n\n        console.log(isEmpty)\n\n        if (!isEmpty) {\n            this.cookie('uid', ck)\n            return this.success(loginRes)\n        } else {\n            return this.fail('login error')\n        }\n    }\n\n    async getuserinfoAction() {\n        try {\n            let uid = this.cookie('uid')\n            let userModel = this.model('user')\n            let userInfo = await userModel.getUserInfo(uid)\n            console.log(userInfo)\n            if (!think.isEmpty(userInfo)) {\n                return this.success(userInfo)\n            } else {\n                await this.cookie('uid', null)\n                return this.fail('invalid uid')\n            }\n        } catch (err) {\n            await this.cookie('uid', null)\n            return this.fail('invalid uid')\n        }\n    }\n\n    async detailAction() {\n        return this.display('user/detail.html')\n    }\n\n    async getuserdetailAction() {\n        let uid = this.cookie('uid')\n        let userModel = this.model('user')\n        let userDetail = await userModel.getUserDetail(uid)\n        if (!think.isEmpty(userDetail)) {\n            return this.success(userDetail)\n        } else {\n            this.cookie('uid', null)\n            return this.fail('invalid uid')\n        }\n    }\n\n    async editAction() {\n        return this.display('user/edit.html')\n    }\n\n    async updateuserdetailAction() {\n        let userDetail = {\n            nickname: this.post('nickname'),\n            avatar: this.post('avatar'),\n            gender: this.post('gender'),\n            birth: this.post('birth'),\n            mail: this.post('mail'),\n            introduction: this.post('introduction'),\n            city: this.post('city')\n        }\n        console.log(userDetail)\n        let uid = this.cookie('uid')\n        let userModel = this.model('user')\n        let updateRes = await userModel.updateUserDetail(userDetail, uid)\n        if (!think.isEmpty(updateRes)) {\n            return this.success('successfully update')\n        } else {\n            return this.fail('update failed')\n        }\n    }\n\n    async verifyAction() {\n        return this.display('user/verify.html')\n    }\n\n    async resetAction() {\n        console.log(await this.session('account'))\n        console.log(await this.session('reset'))\n        return this.display('user/reset.html')\n    }\n\n    async resetpasswordAction() {\n        let account = await this.session('account')\n        let psd = this.post('psd')\n        let userModel = this.model('user')\n        let updateRes = await userModel.resetPassword(account, psd)\n        await this.session('reset', false)\n        if (!think.isEmpty(updateRes)) {\n            return this.success('successfully update')\n        } else {\n            return this.fail('update failed')\n        }\n    }\n}"]}