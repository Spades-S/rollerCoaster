{"version":3,"sources":["../../../../src/home/controller/user.js"],"names":["checkLogin","assign","cookie","display","redirect","uid","userModel","model","articleModel","getLikes","likeArticleIdsRowData","likeArticleIds","JSON","parse","likes","length","fail","currentPage","get","num","getLikeArticles","likeArticles","success","articleid","post","console","log","decreaseLikeNumber","updateLikes","parseInt","lines","account","code","generateVerificationCode","session","Number","sessionCode","errors","phone","nickname","psd","ck","generateUid","register","data","logIntoSystem","loginRes","isEmpty","think","getUserInfo","userInfo","getUserDetail","userDetail","avatarCropped","avatarBase64","split","avatarBinary","Buffer","toString","userRowData","basePath","config","detailPath","id","writeFileSync","err","avatar","gender","birth","mail","introduction","city","updateUserDetail","updateRes","resetPassword"],"mappings":"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","file":"user.js","sourcesContent":["import base from './base.js';\nimport fs from 'fs';\nexport default class extends base {\n    indexAction() {\n        if (checkLogin(this)) {\n            this.assign('uid', this.cookie('uid'))\n            return this.display('user/index.html');\n        } else {\n            return this.redirect('/user/login')\n        }\n    }\n\n    agreementAction() {\n        return this.display('user/agreement.html')\n    }\n\n    likeAction() {\n        return this.display('user/like.html');\n    }\n\n    async getlikesAction() {\n        let uid = this.cookie('uid');\n        let userModel = this.model('user');\n        let articleModel = this.model('article');\n        let likeArticleIdsRowData = await userModel.getLikes(uid);\n        let likeArticleIds = JSON.parse(likeArticleIdsRowData[0].likes);\n        if (likeArticleIds == null || likeArticleIds.length == 0) {\n            return this.fail(1001, 'no likearticle!');\n        }\n        let currentPage = this.get('currentPage');\n        let num = this.get('num');\n        let likeArticles = await articleModel.getLikeArticles(likeArticleIds, currentPage, num);\n        return this.success(likeArticles);\n    }\n\n    async canclelikeAction() {\n        let articleid = this.post('articleid');\n        console.log(articleid);\n        let uid = this.cookie('uid');\n        let userModel = this.model('user');\n        let articleModel = this.model('article');\n        await articleModel.decreaseLikeNumber(articleid);\n        let lines = await userModel.updateLikes(parseInt(articleid), uid);\n        return this.success(lines);\n    }\n\n    registerAction() {\n        return this.display('user/register.html')\n    }\n\n    async getvfcodeAction() {\n        try {\n\n            let account = this.post('account')\n            let code = generateVerificationCode();\n            // let userModel = this.model('user')\n            // let send_res = await userModel.sendMessage(phone, code)\n\n            await this.session('account', account);\n            await this.session('code', Number(code));\n\n\n            let sessionCode = await this.session('code')\n            console.log(sessionCode)\n\n            return this.success(true)\n            // this.success(send_res)\n\n        } catch (err) {\n            return this.fail(err, this.errors())\n        }\n    }\n\n    async verifycodeAction() {\n        return this.success('successfully verified')\n    }\n\n    async passwordAction() {\n        if (checkLogin(this)) {\n            return this.redirect('index')\n        } else {\n            return this.display('user/password.html')\n        }\n    }\n\n    async registerinAction() {\n        try {\n            let phone = await this.session('account'),\n                nickname = this.post('nickname'),\n                psd = this.post('psd')\n            let userModel = this.model('user')\n            let ck = generateUid()\n            let data = await userModel.register(phone, nickname, psd, ck)\n\n            this.cookie('uid', ck)\n            console.log(data)\n\n            return this.success(data)\n        } catch (err) {\n            return this.fail(err)\n        }\n    }\n\n    async loginAction() {\n        let uid = this.cookie('uid')\n        if (uid) {\n            return this.redirect('/user/index')\n        }\n        return this.display('user/login.html')\n    }\n\n    async logintosystemAction() {\n        let account = this.post('account')\n        let psd = this.post('psd')\n        let userModel = this.model('user')\n\n        let ck = generateUid()\n        let loginRes = await userModel.logIntoSystem(account, psd, ck)\n\n        let isEmpty = think.isEmpty(loginRes)\n\n        console.log(isEmpty)\n\n        if (!isEmpty) {\n            this.cookie('uid', ck)\n            return this.success(loginRes)\n        } else {\n            return this.fail('login error')\n        }\n    }\n\n    async getuserinfoAction() {\n        try {\n            let uid = this.cookie('uid')\n            let userModel = this.model('user')\n            let userInfo = await userModel.getUserInfo(uid)\n            console.log(userInfo)\n            if (!think.isEmpty(userInfo)) {\n                return this.success(userInfo)\n            } else {\n                await this.cookie('uid', null)\n                return this.fail('invalid uid')\n            }\n        } catch (err) {\n            await this.cookie('uid', null)\n            return this.fail('invalid uid')\n        }\n    }\n\n    async detailAction() {\n        return this.display('user/detail.html')\n    }\n\n    async getuserdetailAction() {\n        let uid = this.cookie('uid')\n        let userModel = this.model('user')\n        let userDetail = await userModel.getUserDetail(uid)\n        if (!think.isEmpty(userDetail)) {\n            return this.success(userDetail)\n        } else {\n            this.cookie('uid', null)\n            return this.fail('invalid uid')\n        }\n    }\n\n    async editAction() {\n        return this.display('user/edit.html')\n    }\n\n    async updateuserdetailAction() {\n        let avatarCropped = this.post('avatarCropped');\n        let avatarBase64 = avatarCropped.split(',')[1];\n        let avatarBinary = new Buffer(avatarBase64, 'base64').toString('binary');\n        let userModel = this.model('user');\n        let uid = this.cookie('uid')\n        let userRowData = await userModel.getUserInfo(uid);\n        let basePath = this.config('avatarBasePath');\n        let detailPath = '/avatar/' + userRowData.id + '.png';\n        fs.writeFileSync(basePath + detailPath, avatarBinary, 'binary', function (err) {\n            console.log(err);\n        });\n        let userDetail = {\n            nickname: this.post('nickname'),\n            avatar: detailPath,\n            gender: this.post('gender'),\n            birth: this.post('birth'),\n            mail: this.post('mail'),\n            introduction: this.post('introduction'),\n            city: this.post('city')\n        }\n        console.log(userDetail)\n\n\n        let updateRes = await userModel.updateUserDetail(userDetail, uid)\n        if (!think.isEmpty(updateRes)) {\n            return this.success('successfully update')\n        } else {\n            return this.fail('update failed')\n        }\n    }\n\n    async verifyAction() {\n        return this.display('user/verify.html')\n    }\n\n    async resetAction() {\n        console.log(await this.session('account'))\n        console.log(await this.session('reset'))\n        return this.display('user/reset.html')\n    }\n\n    async resetpasswordAction() {\n        let account = await this.session('account')\n        let psd = this.post('psd')\n        let userModel = this.model('user')\n        let updateRes = await userModel.resetPassword(account, psd)\n        await this.session('reset', false)\n        if (!think.isEmpty(updateRes)) {\n            return this.success('successfully update')\n        } else {\n            return this.fail('update failed')\n        }\n    }\n}"]}