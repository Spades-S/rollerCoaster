{"version":3,"sources":["../../../../src/home/controller/user.js"],"names":["checkLogin","assign","cookie","display","redirect","account","post","code","generateVerificationCode","session","Number","sessionCode","console","log","success","fail","errors","phone","nickname","psd","userModel","model","ck","generateUid","register","data","uid","logIntoSystem","loginRes","isEmpty","think","getUserInfo","userInfo","getUserDetail","userDetail","avatar","gender","birth","mail","introduction","city","updateUserDetail","updateRes","resetPassword"],"mappings":"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","file":"user.js","sourcesContent":["import base from './base.js';\n\nexport default class extends base {\n    indexAction() {\n\t    if(checkLogin(this)){\n\t\t    this.assign('uid', this.cookie('uid'))\n\t\t    return this.display('user/index.html');\n\t    } else {\n\t    \treturn this.redirect('/user/login')\n\t    }\n    }\n    \n    async registerAction() {\n\t    return this.display('user/register.html')\n    }\n\n    async getvfcodeAction() {\n    \ttry {\n    \t\t\n\t\t    let account = this.post('account')\n\t\t    let code = generateVerificationCode()\n\t\t    \n\t\t    // let userModel = this.model('user')\n\t\t    // let send_res = await userModel.sendMessage(phone, code)\n\t\t\n\t\t    await this.session('account', account)\n\t\t    await this.session('code', Number(code))\n\t\t    \n\t\t    let sessionCode = await this.session('code')\n\t\t    console.log(sessionCode)\n\t\t    \n\t\t    return this.success(true)\n\t\t    // this.success(send_res)\n\t\t    \n\t    } catch(err) {\n    \t\treturn this.fail(err, this.errors())\n\t    }\n    }\n\t\n\tasync verifycodeAction() {\n    \treturn this.success('successfully verified')\n    }\n    \n    async passwordAction() {\n    \tif(checkLogin(this)){\n    \t\treturn this.redirect('index')\n\t    } else {\n\t\t    return this.display('user/password.html')\n\t    }\n    }\n    \n    async registerinAction() {\n    \ttry {\n\t\t    let phone = await this.session('phone'),\n\t\t\t    nickname = this.post('nickname'),\n\t\t\t    psd = this.post('psd')\n\t\t    let userModel = this.model('user')\n\t\t\n\t\t    let ck = generateUid()\n\t\t    let data = await userModel.register(phone, nickname, psd, ck)\n\t\t\n\t\t    this.cookie('uid', ck)\n\t\t    console.log(data)\n\t\t\n\t\t    return this.success(data)\n\t    } catch(err) {\n    \t\treturn this.fail(err)\n\t    }\n    }\n    \n    async loginAction() {\n    \tlet uid = this.cookie('uid')\n\t    if(uid){\n    \t\treturn this.redirect('/user/index')\n\t    }\n    \treturn this.display('user/login.html')\n    }\n    \n    async logintosystemAction() {\n        let account = this.post('account')\n\t    let psd = this.post('psd')\n\t    let userModel = this.model('user')\n\t\n\t    let ck = generateUid()\n\t    let loginRes = await userModel.logIntoSystem(account, psd, ck)\n\t    \n\t    let isEmpty = think.isEmpty(loginRes)\n\t    \n\t    console.log(isEmpty)\n\t    \n\t    if(!isEmpty){\n\t\t    this.cookie('uid', ck)\n\t\t    return this.success(loginRes)\n\t    } else {\n\t    \treturn this.fail('login error')\n\t    }\n    }\n    \n    async getuserinfoAction() {\n    \ttry {\n\t\t    let uid = this.cookie('uid')\n\t\t    let userModel = this.model('user')\n\t\t    let userInfo = await userModel.getUserInfo(uid)\n\t\t    console.log(userInfo)\n\t\t    if(!think.isEmpty(userInfo)){\n\t\t\t    return this.success(userInfo)\n\t\t    } else {\n\t\t\t    await this.cookie('uid', null)\n\t\t\t    return this.fail('invalid uid')\n\t\t    }\n\t    } catch (err) {\n\t\t    await this.cookie('uid', null)\n\t\t    return this.fail('invalid uid')\n\t    }\n    }\n    \n    async detailAction() {\n    \treturn this.display('user/detail.html')\n    }\n    \n    async getuserdetailAction() {\n\t    let uid = this.cookie('uid')\n\t    let userModel = this.model('user')\n\t    let userDetail = await userModel.getUserDetail(uid)\n\t    if(!think.isEmpty(userDetail)){\n\t\t    return this.success(userDetail)\n\t    } else {\n\t\t    this.cookie('uid', null)\n\t\t    return this.fail('invalid uid')\n\t    }\n    }\n    \n    async editAction() {\n    \treturn this.display('user/edit.html')\n    }\n    \n    async updateuserdetailAction() {\n    \tlet userDetail = {\n    \t\tnickname: this.post('nickname'),\n\t\t    avatar: this.post('avatar'),\n\t\t    gender: this.post('gender'),\n\t\t    birth: this.post('birth'),\n\t\t    mail: this.post('mail'),\n\t\t    introduction: this.post('introduction'),\n\t\t    city: this.post('city')\n\t    }\n\t    console.log(userDetail)\n\t    let uid = this.cookie('uid')\n\t    let userModel = this.model('user')\n\t    let updateRes = await userModel.updateUserDetail(userDetail, uid)\n\t    if(!think.isEmpty(updateRes)){\n    \t\treturn this.success('successfully update')\n\t    } else {\n\t    \treturn this.fail('update failed')\n\t    }\n    }\n    \n    async verifyAction() {\n    \treturn this.display('user/verify.html')\n    }\n    \n    async resetAction() {\n    \tconsole.log(await this.session('account'))\n    \tconsole.log(await this.session('reset'))\n    \treturn this.display('user/reset.html')\n    }\n    \n    async resetpasswordAction() {\n    \tlet account = await this.session('account')\n\t    let psd = this.post('psd')\n\t    let userModel = this.model('user')\n\t    let updateRes = await userModel.resetPassword(account, psd)\n\t    await this.session('reset', false)\n\t    if(!think.isEmpty(updateRes)){\n\t\t    return this.success('successfully update')\n\t    } else {\n\t\t    return this.fail('update failed')\n\t    }\n    }\n}"]}