{"version":3,"sources":["../../../../src/home/controller/user.js"],"names":["checkLogin","assign","cookie","display","redirect","account","post","code","generateVerificationCode","session","Number","sessionCode","console","log","success","fail","errors","phone","nickname","psd","userModel","model","isNickNameExist","nicknameExist","ck","generateUid","register","data","uid","logIntoSystem","loginRes","isEmpty","think","getUserInfo","userInfo","getUserDetail","userDetail","avatarCropped","avatarBase64","split","avatarBinary","Buffer","toString","userRowData","basePath","config","detailPath","id","writeFileSync","err","avatar","gender","birth","mail","introduction","city","updateUserDetail","updateRes","resetPassword"],"mappings":"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","file":"user.js","sourcesContent":["import base from './base.js';\nimport fs from 'fs';\nexport default class extends base {\n    indexAction() {\n        if (checkLogin(this)) {\n            this.assign('uid', this.cookie('uid'))\n            return this.display('user/index.html');\n        } else {\n            return this.redirect('/user/login')\n        }\n    }\n\n    async registerAction() {\n        return this.display('user/register.html')\n    }\n\n    async getvfcodeAction() {\n        try {\n\n            let account = this.post('account')\n            let code = generateVerificationCode();\n            // let userModel = this.model('user')\n            // let send_res = await userModel.sendMessage(phone, code)\n\n            await this.session('account', account);\n            await this.session('code', Number(code));\n\n\n            let sessionCode = await this.session('code')\n            console.log(sessionCode)\n\n            return this.success(true)\n            // this.success(send_res)\n\n        } catch (err) {\n            return this.fail(err, this.errors())\n        }\n    }\n\n    async verifycodeAction() {\n        return this.success('successfully verified')\n    }\n\n    async passwordAction() {\n        if (checkLogin(this)) {\n            return this.redirect('index')\n        } else {\n            return this.display('user/password.html')\n        }\n    }\n\n    async registerinAction() {\n        try {\n            let phone = await this.session('account'),\n                nickname = this.post('nickname'),\n                psd = this.post('psd')\n            let userModel = this.model('user')\n            let nicknameExist = await userModel.isNickNameExist(nickname);\n            if (nicknameExist) {\n                return this.fail(1000, 'nickname has already existed!');\n            }\n\n            let ck = generateUid()\n            let data = await userModel.register(phone, nickname, psd, ck)\n\n            this.cookie('uid', ck)\n            console.log(data)\n\n            return this.success(data)\n        } catch (err) {\n            return this.fail(err)\n        }\n    }\n\n    async loginAction() {\n        let uid = this.cookie('uid')\n        if (uid) {\n            return this.redirect('/user/index')\n        }\n        return this.display('user/login.html')\n    }\n\n    async logintosystemAction() {\n        let account = this.post('account')\n        let psd = this.post('psd')\n        let userModel = this.model('user')\n\n        let ck = generateUid()\n        let loginRes = await userModel.logIntoSystem(account, psd, ck)\n\n        let isEmpty = think.isEmpty(loginRes)\n\n        console.log(isEmpty)\n\n        if (!isEmpty) {\n            this.cookie('uid', ck)\n            return this.success(loginRes)\n        } else {\n            return this.fail('login error')\n        }\n    }\n\n    async getuserinfoAction() {\n        try {\n            let uid = this.cookie('uid')\n            let userModel = this.model('user')\n            let userInfo = await userModel.getUserInfo(uid)\n            console.log(userInfo)\n            if (!think.isEmpty(userInfo)) {\n                return this.success(userInfo)\n            } else {\n                await this.cookie('uid', null)\n                return this.fail('invalid uid')\n            }\n        } catch (err) {\n            await this.cookie('uid', null)\n            return this.fail('invalid uid')\n        }\n    }\n\n    async detailAction() {\n        return this.display('user/detail.html')\n    }\n\n    async getuserdetailAction() {\n        let uid = this.cookie('uid')\n        let userModel = this.model('user')\n        let userDetail = await userModel.getUserDetail(uid)\n        if (!think.isEmpty(userDetail)) {\n            return this.success(userDetail)\n        } else {\n            this.cookie('uid', null)\n            return this.fail('invalid uid')\n        }\n    }\n\n    async editAction() {\n        return this.display('user/edit.html')\n    }\n\n    async updateuserdetailAction() {\n        let avatarCropped = this.post('avatarCropped');\n        let avatarBase64 = avatarCropped.split(',')[1];\n        let avatarBinary = new Buffer(avatarBase64, 'base64').toString('binary');\n        let userModel = this.model('user');\n        let uid = this.cookie('uid')\n        let userRowData = await userModel.getUserInfo(uid);\n        let basePath = this.config('avatarBasePath');\n        let detailPath = '/avatar/'+userRowData.id+'.png';\n        fs.writeFileSync(basePath+detailPath, avatarBinary,'binary',function(err){\n            console.log(err);\n        });\n        let userDetail = {\n            nickname: this.post('nickname'),\n            avatar: detailPath,\n            gender: this.post('gender'),\n            birth: this.post('birth'),\n            mail: this.post('mail'),\n            introduction: this.post('introduction'),\n            city: this.post('city')\n        }\n        console.log(userDetail)\n\n\n        let updateRes = await userModel.updateUserDetail(userDetail, uid)\n        if (!think.isEmpty(updateRes)) {\n            return this.success('successfully update')\n        } else {\n            return this.fail('update failed')\n        }\n    }\n\n    async verifyAction() {\n        return this.display('user/verify.html')\n    }\n\n    async resetAction() {\n        console.log(await this.session('account'))\n        console.log(await this.session('reset'))\n        return this.display('user/reset.html')\n    }\n\n    async resetpasswordAction() {\n        let account = await this.session('account')\n        let psd = this.post('psd')\n        let userModel = this.model('user')\n        let updateRes = await userModel.resetPassword(account, psd)\n        await this.session('reset', false)\n        if (!think.isEmpty(updateRes)) {\n            return this.success('successfully update')\n        } else {\n            return this.fail('update failed')\n        }\n    }\n}"]}