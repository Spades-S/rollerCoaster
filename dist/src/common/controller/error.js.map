{"version":3,"sources":["../../../../src/common/controller/error.js"],"names":["status","think","env","http","error","errorConfig","config","message","isJsonp","jsonp","key","msg","isAjax","fail","module","mode","mode_module","file","options","extend","type","file_depr","fetch","then","content","replace","content_type","end","displayError","controller","base"],"mappings":"AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIE;;;;;iCAKaA,M,EAAO;AAAA;;AAElB;AACA,UAAGC,MAAMC,GAAN,KAAc,YAAjB,EAA8B;AAC5B,aAAKC,IAAL,CAAUC,KAAV,GAAkB,IAAlB;AACD;;AAED,UAAIC,cAAc,KAAKC,MAAL,CAAY,OAAZ,CAAlB;AACA,UAAIC,UAAU,KAAKJ,IAAL,CAAUC,KAAV,IAAmB,KAAKD,IAAL,CAAUC,KAAV,CAAgBG,OAAnC,IAA8C,EAA5D;AACA,UAAG,KAAKC,OAAL,EAAH,EAAkB;AAAA;;AAChB,eAAO,KAAKC,KAAL,qDACJJ,YAAYK,GADR,EACcV,MADd,yCAEJK,YAAYM,GAFR,EAEcJ,OAFd,WAAP;AAID,OALD,MAKM,IAAG,KAAKK,MAAL,EAAH,EAAiB;AACrB,eAAO,KAAKC,IAAL,CAAUb,MAAV,EAAkBO,OAAlB,CAAP;AACD;;AAED,UAAIO,SAAS,QAAb;AACA,UAAGb,MAAMc,IAAN,KAAed,MAAMe,WAAxB,EAAoC;AAClCF,iBAAS,KAAKR,MAAL,CAAY,gBAAZ,CAAT;AACD;AACD,UAAIW,OAAUH,MAAV,eAA0Bd,MAA1B,UAAJ;AACA,UAAIkB,UAAU,KAAKZ,MAAL,CAAY,KAAZ,CAAd;AACAY,gBAAUjB,MAAMkB,MAAN,CAAa,EAAb,EAAiBD,OAAjB,EAA0B,EAACE,MAAM,MAAP,EAAeC,WAAW,GAA1B,EAA1B,CAAV;AACA,WAAKC,KAAL,CAAWL,IAAX,EAAiB,EAAjB,EAAqBC,OAArB,EAA8BK,IAA9B,CAAmC,mBAAW;AAC5CC,kBAAUA,QAAQC,OAAR,CAAgB,eAAhB,EAAiClB,OAAjC,CAAV;AACA,eAAKa,IAAL,CAAUF,QAAQQ,YAAlB;AACA,eAAKC,GAAL,CAASH,OAAT;AACD,OAJD;AAKD;AACD;;;;;;;iCAIY;AACV,aAAO,KAAKI,YAAL,CAAkB,GAAlB,CAAP;AACD;AACD;;;;;;;iCAIY;AACV,aAAO,KAAKA,YAAL,CAAkB,GAAlB,CAAP;AACD;AACD;;;;;;;iCAIY;AACV,aAAO,KAAKA,YAAL,CAAkB,GAAlB,CAAP;AACD;AACD;;;;;;;iCAIY;AACV,aAAO,KAAKA,YAAL,CAAkB,GAAlB,CAAP;AACD;AACD;;;;;;;iCAIY;AACV,aAAO,KAAKA,YAAL,CAAkB,GAAlB,CAAP;AACD;;;EAvE0B3B,MAAM4B,UAAN,CAAiBC,I","file":"error.js","sourcesContent":["'use strict';\n/**\n * error controller\n */\nexport default class extends think.controller.base {\n  /**\n   * display error page\n   * @param  {Number} status []\n   * @return {Promise}        []\n   */\n  displayError(status){\n\n    //hide error message on production env\n    if(think.env === 'production'){\n      this.http.error = null;\n    }\n\n    let errorConfig = this.config('error');\n    let message = this.http.error && this.http.error.message || '';\n    if(this.isJsonp()){\n      return this.jsonp({\n        [errorConfig.key]: status,\n        [errorConfig.msg]: message\n      })\n    }else if(this.isAjax()){\n      return this.fail(status, message);\n    }\n\n    let module = 'common';\n    if(think.mode !== think.mode_module){\n      module = this.config('default_module');\n    }\n    let file = `${module}/error/${status}.html`;\n    let options = this.config('tpl');\n    options = think.extend({}, options, {type: 'base', file_depr: '_'});\n    this.fetch(file, {}, options).then(content => {\n      content = content.replace('ERROR_MESSAGE', message);\n      this.type(options.content_type);\n      this.end(content);\n    });\n  }\n  /**\n   * Bad Request \n   * @return {Promise} []\n   */\n  _400Action(){\n    return this.displayError(400);\n  }\n  /**\n   * Forbidden \n   * @return {Promise} []\n   */\n  _403Action(){\n    return this.displayError(403);\n  }\n  /**\n   * Not Found \n   * @return {Promise}      []\n   */\n  _404Action(){\n    return this.displayError(404);\n  }\n  /**\n   * Internal Server Error\n   * @return {Promise}      []\n   */\n  _500Action(){\n    return this.displayError(500);\n  }\n  /**\n   * Service Unavailable\n   * @return {Promise}      []\n   */\n  _503Action(){\n    return this.displayError(503);\n  }\n}"]}